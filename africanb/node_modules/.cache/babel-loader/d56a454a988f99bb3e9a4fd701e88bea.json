{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_RESET_PASSWORD_USER } from '../globalConfig/globalConstConfig';\nimport axios from 'axios';\nimport { required } from 'vuelidate/lib/validators';\nexport default {\n  name: \"changerPassword\",\n  data() {\n    return {\n      errorMsg: null,\n      successMsg: null,\n      overlay: null,\n      oldPasswordIsVisible: false,\n      newPasswordIsVisible: false,\n      userParams: {\n        email: null,\n        oldPassword: null,\n        newPassword: null\n      },\n      userReset: {\n        data: {\n          email: null,\n          oldPassword: null,\n          newPassword: null\n        }\n      }\n    };\n  },\n  validations: {\n    userParams: {\n      oldPassword: {\n        required\n      },\n      newPassword: {\n        required\n      }\n    }\n  },\n  methods: {\n    async retrieveUserInfo() {\n      /**\n       * REFAIRE LA RECUPERATION DES DONNEES UTILISATEURS\n       */\n      if (localStorage.getItem('userLoggedSocieteMere')) {\n        const parsedUserLogged = JSON.parse(localStorage.getItem('userLoggedSocieteMere'));\n        console.log(parsedUserLogged);\n        this.userReset.email = parsedUserLogged.email;\n      }\n    },\n    // SOUMISSION DU FORMULAIRE\n    submitForm() {\n      this.$v.$touch();\n      if (this.$v.userParams.$invalid) this.errorMsg = \"Vous avez omis des champs de saisie\";else this.resetPasswordUser();\n    },\n    //CHANGER DE MOT DE PASSE\n    async resetPasswordUser() {\n      this.overlay = true;\n      this.userReset.data.email = this.userReset.email;\n      this.userReset.data.oldPassword = this.userReset.oldPassword;\n      this.userReset.data.email = this.userReset.email;\n      await axios.post(API_RESET_PASSWORD_USER, this.userReset).then(response => {\n        if (response.status == 200) {\n          if (response.data.status.code == 800) {\n            this.successMsg = response.data.status.message;\n            $(\".alert-success\").fadeIn();\n            setTimeout(function () {\n              $(\".alert-success\").fadeOut();\n            }, 4000);\n            this.userDataToSend.datas = [];\n          } else {\n            this.errorMsg = response.data.status.message;\n            $(\".alert-error\").fadeIn();\n            setTimeout(function () {\n              $(\".alert-error\").fadeOut();\n            }, 3000);\n            this.userDataToSend.datas = [];\n          }\n        } else if (response.status == 204) {\n          this.warningMsg = \"Erreur , lors de la création\";\n          $(\".alert-warning\").fadeIn();\n          setTimeout(function () {\n            $(\".alert-warning\").fadeOut();\n          }, 3000);\n          this.userDataToSend.datas = [];\n        } else {\n          this.errorMsg = \"Erreur , opération de création impossible\";\n          $(\".alert-error\").fadeIn();\n          setTimeout(function () {\n            $(\".alert-error\").fadeOut();\n          }, 3000);\n          this.userDataToSend.datas = [];\n        }\n      });\n    }\n  },\n  computed: {\n    //GESTION DES CHAMPS UTILISATEURS\n\n    oldPasswordError() {\n      const errors = [];\n      if (!this.$v.userUpdating.oldPassword.$dirty) return errors;\n      !this.$v.userUpdating.oldPassword.required && errors.push('Entrer l\\'ancien mot de passe.');\n      return errors;\n    },\n    newPasswordError() {\n      const errors = [];\n      if (!this.$v.userUpdating.newPassword.$dirty) return errors;\n      !this.$v.userUpdating.newPassword.required && errors.push('Le nouveau mot de passe est obligatoire.');\n      return errors;\n    }\n  },\n  mounted() {\n    this.retrieveUserInfo();\n  }\n};","map":{"version":3,"mappings":";AA0CA;AACA;AACA;AACA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MAEAC;MACAC;MAEAC;QACAC;QACAC;QACAC;MACA;MAEAC;QACAV;UACAO;UACAC;UACAC;QACA;MACA;IACA;EACA;EAEAE;IACAL;MACAE;QACAI;MACA;MACAH;QACAG;MACA;IACA;EACA;EAEAC;IAEA;MACA;AACA;AACA;MACA;QACA;QACAC;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA,4FACA;IACA;IAGA;IACA;MACA;MACA;MACA;MACA;MACA;QACA;UACA;YACA;YACAC;YACAC;cACAD;YACA;YACA;UACA;YACA;YACAA;YACAC;cACAD;YACA;YACA;UACA;QAEA,OACA;UACA;UACAA;UACAC;YACAD;UACA;UACA;QACA,OACA;UACA;UACAA;UACAC;YACAD;UACA;UACA;QACA;MACA;IACA;EAEA;EAEAE;IAEA;;IAEAC;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;IACA;EAEA;EAEAC;IACA;EACA;AACA","names":["name","data","errorMsg","successMsg","overlay","oldPasswordIsVisible","newPasswordIsVisible","userParams","email","oldPassword","newPassword","userReset","validations","required","methods","console","submitForm","$","setTimeout","computed","oldPasswordError","newPasswordError","mounted"],"sourceRoot":"src/components/administrateur_societe","sources":["changerPassword.vue"],"sourcesContent":["<template>\n    <v-app>\n        <v-form @submit.prevent=\"submitForm\">\n            <v-card class=\"mx-auto\" max-width=\"700\">\n                <v-card-title><h4>CHANGER LE MOT DE PASSE</h4></v-card-title>\n                <v-card-subtitle>Changer votre de passe pour une meilleur sécurité</v-card-subtitle>\n                <v-card-text>\n                    <v-container>\n                        <v-row>\n                            <v-col><v-text-field disabled class=\"myInput\" :error-messages=\"emailError\" v-model.trim=\"$v.userParams.email.$model\" label=\"E-mail\" outlined dense></v-text-field></v-col>\n                        </v-row>\n\n                        <v-row>\n                            <v-col>\n                                <v-text-field :error-messages=\"passwordError\" v-model.trim=\"$v.userParams.oldPassword.$model\" :append-icon=\"passwordIsVisible ? 'mdi-eye' : 'mdi-eye-off'\"  class=\"input_field\"\n                                    @click:append=\"oldPasswordIsVisible = !oldPasswordIsVisible\" label=\"Votre mot de passe actuel\"\n                                    dense outlined prepend-inner-icon=\"mdi-lock-check\" color=\"primary\" :type=\"passwordIsVisible ? 'text' : 'password'\">\n                                </v-text-field>\n                            </v-col>\n                            <v-col>\n                                <v-text-field :error-messages=\"passwordError\" v-model.trim=\"$v.userParams.newPassword.$model\" :append-icon=\"passwordIsVisible ? 'mdi-eye' : 'mdi-eye-off'\"  class=\"input_field\"\n                                    @click:append=\"newPasswordIsVisible = !newPasswordIsVisible\" label=\"Votre nouveau mot de passe\"\n                                    dense outlined prepend-inner-icon=\"mdi-lock-check\" color=\"primary\" :type=\"passwordIsVisible ? 'text' : 'password'\">\n                                </v-text-field>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                </v-card-text>\n\n                <v-card-actions>\n                    <v-btn type=\"button\" small outlined color=\"secondary\">REINITIALISER</v-btn>\n                    <v-btn type=\"submit\" text small outlined color=\"primary\">VALIDER LES MODIFICATIONS</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-form>\n        <v-alert class=\"myalert alert-error\" type=\"error\" width=\"350px\" dismissible>{{ errorMsg }}</v-alert>\n        <v-alert class=\"myalert alert-success\" type=\"success\" width=\"350px\" dismissible>{{ successMsg }}</v-alert>\n        <v-overlay :value=\"overlay\"><v-progress-circular indeterminate size=\"64\"></v-progress-circular></v-overlay>\n    </v-app>\n</template>\n\n<script>\nimport { API_RESET_PASSWORD_USER } from '../globalConfig/globalConstConfig';\nimport axios from 'axios';\nimport { required } from 'vuelidate/lib/validators'\nexport default {\n    name:\"changerPassword\",\n    data(){\n        return{\n            errorMsg : null,\n            successMsg : null,\n            overlay: null, \n\n            oldPasswordIsVisible : false,\n            newPasswordIsVisible : false , \n\n            userParams:{\n                email: null,\n                oldPassword: null,\n                newPassword:null\n            },\n\n            userReset:{\n                data:{\n                    email:null,\n                    oldPassword : null,\n                    newPassword : null, \n                }\n            }\n        }\n    },\n\n    validations:{\n        userParams:{\n            oldPassword:{\n                required\n            },\n            newPassword:{\n                required\n            }\n        }\n    },\n\n    methods:{\n\n        async retrieveUserInfo(){\n            /**\n             * REFAIRE LA RECUPERATION DES DONNEES UTILISATEURS\n             */\n            if (localStorage.getItem('userLoggedSocieteMere')) {\n                const parsedUserLogged = JSON.parse(localStorage.getItem('userLoggedSocieteMere'));\n                console.log(parsedUserLogged)\n                this.userReset.email = parsedUserLogged.email;\n            }\n        },\n\n        // SOUMISSION DU FORMULAIRE\n        submitForm(){\n            this.$v.$touch();\n            if(this.$v.userParams.$invalid) this.errorMsg = \"Vous avez omis des champs de saisie\" \n            else this.resetPasswordUser();\n        },\n\n\n        //CHANGER DE MOT DE PASSE\n        async resetPasswordUser(){\n            this.overlay = true ;\n            this.userReset.data.email = this.userReset.email;\n            this.userReset.data.oldPassword = this.userReset.oldPassword;\n            this.userReset.data.email = this.userReset.email;\n            await axios.post(API_RESET_PASSWORD_USER, this.userReset ).then((response) => {\n                if (response.status == 200) {\n                    if (response.data.status.code == 800) {\n                        this.successMsg = response.data.status.message\n                        $(\".alert-success\").fadeIn();\n                        setTimeout(function(){\n                            $(\".alert-success\").fadeOut(); \n                        }, 4000)\n                        this.userDataToSend.datas = [];\n                    }else{\n                        this.errorMsg = response.data.status.message\n                        $(\".alert-error\").fadeIn();\n                        setTimeout(function(){\n                            $(\".alert-error\").fadeOut(); \n                        }, 3000)\n                        this.userDataToSend.datas = [];\n                    }  \n                    \n                }\n                else if (response.status == 204) {\n                    this.warningMsg = \"Erreur , lors de la création\";\n                    $(\".alert-warning\").fadeIn();\n                    setTimeout(function(){\n                        $(\".alert-warning\").fadeOut(); \n                    }, 3000)\n                    this.userDataToSend.datas = [];\n                }\n                else{\n                    this.errorMsg = \"Erreur , opération de création impossible\";\n                    $(\".alert-error\").fadeIn();\n                    setTimeout(function(){\n                        $(\".alert-error\").fadeOut(); \n                    }, 3000)\n                    this.userDataToSend.datas = [];\n                }\n            })\n        }\n\n    },\n\n    computed:{\n\n        //GESTION DES CHAMPS UTILISATEURS\n\n        oldPasswordError(){\n            const errors = [];\n            if (!this.$v.userUpdating.oldPassword.$dirty) return errors\n            !this.$v.userUpdating.oldPassword.required && errors.push('Entrer l\\'ancien mot de passe.')\n            return errors \n        },\n\n        newPasswordError(){\n            const errors = [];\n            if (!this.$v.userUpdating.newPassword.$dirty) return errors\n            !this.$v.userUpdating.newPassword.required && errors.push('Le nouveau mot de passe est obligatoire.')\n            return errors \n        },\n\n    },\n\n    mounted(){\n        this.retrieveUserInfo();\n    }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}