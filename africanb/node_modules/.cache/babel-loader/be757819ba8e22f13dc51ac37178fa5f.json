{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_OBTENIR_LISTE_DES_VILLES_DISPONIBLE, API_RECUPERER_LISTE_OFFRE_VOYAGE } from '../globalConfig/globalConstConfig';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport { required } from 'vuelidate/lib/validators';\nexport default {\n  name: \"CreerVilleEscale\",\n  data() {\n    return {\n      errorMsg: null,\n      offreVoyageObject: {\n        data: {\n          compagnieTransportRaisonSociale: \"COMPAGNIE KOUEVI CT\"\n        }\n      },\n      offreVoyageParCompagnieTransportList: [],\n      villesEscalesList: [],\n      villesList: [],\n      objectValue: {},\n      villesObject: {\n        datas: []\n      },\n      villeEscaleData: {\n        offreVoyageDesignation: null,\n        villeDesignation: null,\n        position: null\n      }\n    };\n  },\n  validations: {\n    villeEscaleData: {\n      offreVoyageDesignation: {\n        required\n      },\n      villeDesignation: {\n        required\n      },\n      position: {\n        required\n      }\n    }\n  },\n  methods: {\n    // OBTENIR LA LISTE DES OFFRES DE VOYAGES PAR COMPAGNIES\n    async obtenirOffresVoyageParCompagnies() {\n      axios.post(API_RECUPERER_LISTE_OFFRE_VOYAGE, this.offreVoyageObject).then(response => {\n        if (response.status == 200) {\n          if (response.data.status.code != 800) {\n            this.errorMsg = response.data.status.message;\n            $(\".alert-error\").fadeIn();\n            setTimeout(function () {\n              $(\".alert-error\").fadeOut();\n            }, 4000);\n          } else {\n            this.offreVoyageParCompagnieTransportList = response.data.items;\n          }\n        } else {\n          this.errorMsg = \"Erreur\";\n          $(\".alert-error\").fadeIn();\n          setTimeout(function () {\n            $(\".alert-error\").fadeOut();\n          }, 4000);\n        }\n      }).catch(e => {\n        this.errorMsg = e;\n      });\n    },\n    // ENREGISTRER UNE VILLE DANS LA LISTE DES VILLES ESCALES\n    async saveVilleEscale(item) {\n      var villeToSave = {\n        offreVoyageDesignation: null,\n        villeDesignation: null,\n        position: null\n      };\n      villeToSave.offreVoyageDesignation = item.offreVoyageDesignation;\n      villeToSave.offreVoyageDesignation = item.villeDesignation;\n      villeToSave.position = item.position;\n      this.villesObject.datas.push(villeToSave);\n      villeToSave.offreVoyageDesignation = null;\n      villeToSave.offreVoyageDesignation = null;\n      villeToSave.position = null;\n      console.log(this.villesObject.datas);\n    },\n    //AJOUTER UNE VILLE ESCALE\n    ajouterNouvelleVilleEscale() {\n      var nouvelleVille = {\n        offreVoyageDesignation: null,\n        villeDesignation: null,\n        position: null\n      };\n      this.villesEscalesList.push(nouvelleVille);\n    },\n    //SUPPRIMER UNE VILLE ESCALE \n    supprimerVilleEscale(position) {\n      this.villesEscalesList.splice(position, 1);\n    },\n    //RECUPERER LA LISTE DES VILLES DISPONIBLES\n    async obtenirVillesListApi() {\n      await axios.post(API_OBTENIR_LISTE_DES_VILLES_DISPONIBLE, this.objectValue).then(response => {\n        this.villesList = response.data.items;\n      }).catch(e => {\n        this.errorMsg = e;\n        $(\".alert-error\").fadeIn();\n        setTimeout(function () {\n          $(\".alert-error\").fadeOut();\n        }, 4000);\n      });\n    }\n  },\n  computed: {\n    // CONTRAINTES POUR L'ENREGISTREMENT DES VILLES ESCALES\n\n    villeDesignation() {\n      const errors = [];\n      if (!this.$v.villeEscaleData.villeDesignation.$dirty) return errors;\n      !this.$v.villeEscaleData.villeDesignation.required && errors.push('Le champs ville est obligatoire.');\n      return errors;\n    },\n    offreVoyageDesignation() {\n      const errors = [];\n      if (!this.$v.villeEscaleData.offreVoyageDesignation.$dirty) return errors;\n      !this.$v.villeEscaleData.offreVoyageDesignation.required && errors.push('Veuillez sélectionner une offre de voyage.');\n      return errors;\n    },\n    positionRequired() {\n      const errors = [];\n      if (!this.$v.villeEscaleData.position.$dirty) return errors;\n      !this.$v.villeEscaleData.position.required && errors.push('Definissez une position.');\n      return errors;\n    }\n  },\n  mounted() {\n    this.obtenirVillesListApi();\n    this.obtenirOffresVoyageParCompagnies();\n  }\n};","map":{"version":3,"mappings":";AAwDA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MAGAC;QACAF;UACAG;QACA;MACA;MAEAC;MAEAC;MACAC;MAEAC;MAEAC;QACAC;MACA;MAEAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEAC;IAEAJ;MACAC;QACAI;MACA;MACAH;QACAG;MACA;MACAF;QACAE;MACA;IACA;EACA;EAEAC;IAEA;IACA;MACAC;QACA;UACA;YACA;YACAC;YACAC;cACAD;YACA;UACA;YACA;UACA;QACA;UACA;UACAA;UACAC;YACAD;UACA;QACA;MACA;QACA;MACA;IACA;IAEA;IACA;MACA;QACAP;QACAC;QACAC;MACA;MAEAO;MACAA;MACAA;MAEA;MACAA;MACAA;MACAA;MAEAC;IACA;IAEA;IACAC;MACA;QACAX;QACAC;QACAC;MACA;MACA;IACA;IAEA;IACAU;MACA;IACA;IAEA;IACA;MACA;QACA;MACA;QACA;QACAL;QACAC;UACAD;QACA;MACA;IACA;EACA;EAEAM;IAEA;;IAEAZ;MACA;MACA;MACA;MACA;IACA;IAEAD;MACA;MACA;MACA;MACA;IACA;IAEAc;MACA;MACA;MACA;MACA;IACA;EAEA;EAEAC;IACA;IACA;EACA;AACA","names":["name","data","errorMsg","offreVoyageObject","compagnieTransportRaisonSociale","offreVoyageParCompagnieTransportList","villesEscalesList","villesList","objectValue","villesObject","datas","villeEscaleData","offreVoyageDesignation","villeDesignation","position","validations","required","methods","axios","$","setTimeout","villeToSave","console","ajouterNouvelleVilleEscale","supprimerVilleEscale","computed","positionRequired","mounted"],"sourceRoot":"src/components/administration_compagnie_transport","sources":["CreerVilleEscale.vue"],"sourcesContent":["<template>\n    <v-app>\n        <v-form>\n            <v-container fluid>\n                <v-card>\n                    <v-card-title>GESTION DES VILLES EN ESCALES\n                        <v-spacer></v-spacer>\n                        <v-dialog transition=\"dialog-top-transition\" max-width=\"700\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-btn color=\"secondary\" rounded small v-bind=\"attrs\" v-on=\"on\">Ajouter des villes escales &nbsp;<v-icon>mdi-plus-circle</v-icon></v-btn>\n                            </template>\n                            <template v-slot:default=\"dialog\">\n                                <v-card>\n                                    <v-toolbar color=\"white\"><span class=\"font-weight-bold\">PARAMÈTRAGE DES VILLES D'ESCALES</span></v-toolbar>\n                                    <v-card-text>\n                                        <v-container fluid>\n                                            <v-row>\n                                                <v-subheader><br>Définisser le nombre de villes d'escales : &nbsp;&nbsp;&nbsp; </v-subheader>\n                                            </v-row>\n                                            \n                                            <v-row justify=\"space-between\" v-for=\"ville , index in villesEscalesList\" :key=\"index\">\n                                                <v-col cols=\"3\"><v-text-field color=\"black\" :error-messages=\"positionRequired\" dense outlined rounded type=\"number\" min=\"0\" label=\"N° Ordre\" v-model=\"villeEscaleData.position\"></v-text-field></v-col>\n                                                <v-col cols=\"6\"><v-select :items=\"villesList\" :error-messages=\"villeDesignation\" item-text=\"designation\" item-value=\"designation\" dense outlined rounded label=\"Sélectionnez la ville\"></v-select></v-col>\n                                                <v-col><v-btn icon dense @click=\"saveVilleEscale(villeEscaleData.position)\"><v-icon color=\"primary\">mdi-content-save-edit</v-icon></v-btn></v-col>\n                                                <v-col><v-btn icon dense><v-icon color=\"red\">mdi-delete</v-icon></v-btn></v-col>\n                                            </v-row>\n                                        </v-container>\n                                    </v-card-text>\n                                    <v-card-actions class=\"justify-end\">\n                                        <v-btn text @click=\"dialog.value = false\">Effectuer</v-btn>\n                                    </v-card-actions>\n                                </v-card>\n                            </template>\n                        </v-dialog>\n                    </v-card-title>\n                    <v-card-subtitle>Gérer les villes escales pour une offre</v-card-subtitle>\n                    <v-container>\n                        <v-row>\n                            <v-col cols=\"6\">\n                                <v-select :items=\"offreVoyageParCompagnieTransportList\" item-text=\"designation\" item-value=\"designation\" :error-messages=\"offreVoyageDesignation\" v-model.trim=\"$v.villeEscaleData.offreVoyageDesignation.$model\" dense outlined rounded color=\"teal\" label=\"sélectionnez une offre\"></v-select>\n                            </v-col>\n                        </v-row>\n                    </v-container>\n                    <v-card-actions>\n                        <v-btn rounded outlined small>REINITIALISER</v-btn>\n                        <v-btn rounded outlined small color=\"primary\">APPLIQUER</v-btn>\n                    </v-card-actions>\n                </v-card>\n                \n            </v-container>\n        </v-form>\n        <v-alert class=\"myalert alert-error\" type=\"error\" width=\"350px\" dismissible>{{ errorMsg }}</v-alert>\n    </v-app>\n</template>\n\n<script>\nimport { API_OBTENIR_LISTE_DES_VILLES_DISPONIBLE , API_RECUPERER_LISTE_OFFRE_VOYAGE} from '../globalConfig/globalConstConfig'\nimport axios from 'axios'\nimport $ from 'jquery'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n    name:\"CreerVilleEscale\",\n    data(){\n        return{\n            errorMsg:null,\n\n\n            offreVoyageObject:{\n                data:{\n                    compagnieTransportRaisonSociale:\"COMPAGNIE KOUEVI CT\"\n                }\n            },\n\n            offreVoyageParCompagnieTransportList:[],\n\n            villesEscalesList:[],\n            villesList:[],\n\n            objectValue:{},\n\n            villesObject : {\n                datas : []\n            },\n\n            villeEscaleData:{\n                offreVoyageDesignation : null,\n                villeDesignation : null,\n                position : null ,\n            }\n        }\n    },\n\n    validations : {\n\n        villeEscaleData:{\n            offreVoyageDesignation : {\n                required\n            },\n            villeDesignation:{\n                required\n            },\n            position:{\n                required\n            }\n        }\n    },\n\n    methods:{\n\n        // OBTENIR LA LISTE DES OFFRES DE VOYAGES PAR COMPAGNIES\n        async obtenirOffresVoyageParCompagnies(){\n            axios.post(API_RECUPERER_LISTE_OFFRE_VOYAGE, this.offreVoyageObject ).then((response) => {\n                if (response.status == 200) {\n                    if (response.data.status.code != 800) {\n                        this.errorMsg = response.data.status.message\n                        $(\".alert-error\").fadeIn();\n                        setTimeout(function(){\n                            $(\".alert-error\").fadeOut(); \n                        }, 4000)\n                    }else{\n                        this.offreVoyageParCompagnieTransportList = response.data.items\n                    }\n                }else{\n                    this.errorMsg = \"Erreur\";\n                    $(\".alert-error\").fadeIn();\n                    setTimeout(function(){\n                        $(\".alert-error\").fadeOut(); \n                    }, 4000)\n                }\n            }).catch((e) => {\n                this.errorMsg = e\n            })\n        },\n\n        // ENREGISTRER UNE VILLE DANS LA LISTE DES VILLES ESCALES\n        async saveVilleEscale(item){\n            var villeToSave = {\n                offreVoyageDesignation : null,\n                villeDesignation : null,\n                position : null\n            };\n\n            villeToSave.offreVoyageDesignation = item.offreVoyageDesignation;\n            villeToSave.offreVoyageDesignation = item.villeDesignation;\n            villeToSave.position = item.position;\n\n            this.villesObject.datas.push(villeToSave);\n            villeToSave.offreVoyageDesignation = null;\n            villeToSave.offreVoyageDesignation = null;\n            villeToSave.position = null;\n\n            console.log(this.villesObject.datas)\n        },\n\n        //AJOUTER UNE VILLE ESCALE\n        ajouterNouvelleVilleEscale(){\n            var nouvelleVille = {\n                offreVoyageDesignation : null,\n                villeDesignation : null,\n                position : null\n            }\n            this.villesEscalesList.push(nouvelleVille);\n        },\n\n        //SUPPRIMER UNE VILLE ESCALE \n        supprimerVilleEscale(position){\n            this.villesEscalesList.splice(position,1)\n        },\n\n        //RECUPERER LA LISTE DES VILLES DISPONIBLES\n        async obtenirVillesListApi(){\n            await axios.post(API_OBTENIR_LISTE_DES_VILLES_DISPONIBLE, this.objectValue).then((response) => {\n                this.villesList = response.data.items\n            }).catch((e) => {\n                this.errorMsg = e ;\n                $(\".alert-error\").fadeIn();\n                setTimeout(function(){\n                    $(\".alert-error\").fadeOut(); \n                }, 4000)\n            })\n        }\n    },\n\n    computed:{\n\n        // CONTRAINTES POUR L'ENREGISTREMENT DES VILLES ESCALES\n\n        villeDesignation(){\n           const errors = [];\n            if (!this.$v.villeEscaleData.villeDesignation.$dirty) return errors\n            !this.$v.villeEscaleData.villeDesignation.required && errors.push('Le champs ville est obligatoire.')\n            return errors \n        },\n\n        offreVoyageDesignation(){\n           const errors = [];\n            if (!this.$v.villeEscaleData.offreVoyageDesignation.$dirty) return errors\n            !this.$v.villeEscaleData.offreVoyageDesignation.required && errors.push('Veuillez sélectionner une offre de voyage.')\n            return errors \n        },\n\n        positionRequired(){\n           const errors = [];\n            if (!this.$v.villeEscaleData.position.$dirty) return errors\n            !this.$v.villeEscaleData.position.required && errors.push('Definissez une position.')\n            return errors \n        },\n\n    },\n\n    mounted(){\n        this.obtenirVillesListApi();\n        this.obtenirOffresVoyageParCompagnies();\n    }\n}\n</script>\n\n<style scoped>\n    .myalert{\n        display: none;\n        z-index: 1900;\n    }\n\n    .alert-success{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-error{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    }\n\n    .alert-warning{\n        position: fixed;\n        top: 25px;\n        right:2%;\n        width: 25%;\n    } \n</style>"]},"metadata":{},"sourceType":"module"}